#!/usr/bin/env python3

import sys, os, configparser, re
from alarmeitbl.eventos import GerenciadorEventos

from alarmeitbl.myeventloop import Handler, Timeout, Log
from alarmeitbl.myeventloop.tcpserver import TCPListener, TCPServerEventLoop
from alarmeitbl.tratador import Tratador
from alarmeitbl.tratador_fotos import TratadorDeFotos

def usage():
    print("Modo de usar: %s <arquivo de configuração>" % sys.argv[0])
    sys.exit(1)

def parse_config() -> configparser.SectionProxy:
    if len(sys.argv) < 2:
        usage()

    cfgfile = configparser.ConfigParser()
    cfgfile.read(sys.argv[1])
    if 'receptorip' not in cfgfile:
        usage()
    cfg = cfgfile['receptorip']
    return cfg

Log.set_level(Log.INFO)
Log.set_file("receptorip.log")

def watchdog(to_obj):
    Log.info("receptor em funcionamento")
    p = os.popen("./gancho_watchdog", 'w')
    p.close()
    to_obj.reset(3600)

Timeout.new("watchdog", 15, watchdog)

config = parse_config()
host = ("" + config['addr']).lower().strip()
port = int(config['port'])
caddr = ("" + config['caddr']).lower().strip()
cport = int(config['cport'])
senha = int(config['senha'])
tam_senha = int(config['tamanho'])
centrais = re.compile("" + config['centrais'])
maxconn = int(config['maxconn'])
mqtt_enabled = config.getboolean('mqtt_enabled', False)
if mqtt_enabled:
    mqtt_broker = config['mqtt_broker']
    mqtt_port = config.getint('mqtt_port', 1883)
    mqtt_base_topic = config['mqtt_base_topic']
    Tratador.gerenciador_eventos = GerenciadorEventos(mqtt_broker=mqtt_broker, mqtt_port=mqtt_port, base_topic=mqtt_base_topic)

Tratador.tratador_de_fotos = TratadorDeFotos('receptorip', caddr, cport, senha, tam_senha)

def valida_central(id_central):
    return centrais.match(id_central)

def centrais_conectadas():
    n = 0
    for h in Handler.items.values():
        if isinstance(h, Tratador):
            if h.central_identificada:
               n += 1
    return n

def valida_maxconn():
    return centrais_conectadas() < maxconn

Tratador.valida_central = valida_central
Tratador.valida_maxconn = valida_maxconn

ev = TCPServerEventLoop((host, port), TCPListener, Tratador)

def central_nao_conectada(to_obj):
    if not centrais_conectadas():
        Log.info("nenhuma central conectada")
        p = os.popen("./gancho_central", 'w')
        p.close()
    to_obj.restart()

Timeout.new("central_nc", 3600, central_nao_conectada)

ev.loop()
